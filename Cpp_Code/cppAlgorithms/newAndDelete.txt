/**
 * 在 C语言中，动态分配和释放内存的函数是 malloc、calloc 和 free
 * 而在 C++语言中，new、new[]、delete 和 delete[] 操作符通常会被用来动态地分配内存和释放内存
 * 需要注意的是，new、new[]、delete 和 delete[] 是操作符，而非函数。new 和 delete 是 C++ 的关键字
 * 操作符 new 用于动态分配单个空间，而 new[] 则是用于动态分配一个数组
 * 操作符 delete 用于释放由 new 分配的空间，delete[] 则用于释放 new[] 分配的一个数组
 * 例子：
 * int *p = new int;
 * int *A = new int[10];
 * delete p;
 * delete[] p;

 * 为了避免内存泄露，通常 new 和 delete、new[] 和 delete[] 操作符应该成对出现
 * 并且不要将这些操作符与 C语言中动态分配内存和释放内存的几个函数一起混用。

 * 编写 C++ 程序时，应尽量使用 new、new[]、delete 和 delete[] 操作符进行动态内存分配和释放
 * 而不要使用 C语言中内存分配和释放的函数，因为 new、new[]、delete 和 delete[] 操作符可以使用 C++ 的一些特性，如类的构造函数和析构函数，能够更好地管理 C++ 程序的内存。
 */