#include <iostream>
using namespace std;

int main(){
    string s1("Justin");
    string s2("Alic");
    string *p = &s1;    //指针p指向s1的地址,但用指针表示的是地址，如果带上*表示的就是该指针指向的值
    string &q = s1;     //q是s1的引用，公用一个地址，单用引用就是表示的引用所对应的值，如果加上&就是表示的引用表示的地址
    q = s2;             //q仍使用的是s1的地址，但是此时的值已经改变了
    p = &s2;            //指针p重新指向了s2的地址，但是没有改变里面的值，显示s2
    cout<<s1<<endl;
    cout<<s2<<endl;
    cout<<*p<<" "<<p<<endl;
    cout<<&q<<" "<<q<<endl;
    return 0;
}
/**
 * 下列情况可以使用指针：
 * 一是你考虑到存在不指向任何对象的可能（在这种情况下，你能够设置指针为空）
 * 二是你需要能够在不同的时刻指向不同的对象（在这种情况下，你能改变指针的指向）
 */

/**
 * 如果总是指向一个对象并且一旦指向一个对象后就不会改变指向，那么你应该使用引用
 * 当你重载某个操作符时，你应该使用引用
 * 最普通的例子是操作符[].
 * 这个操作符典型的用法是返回一个目标对象，其能被赋值
 * 当你知道你必须指向一个对象并且不想改变其指向时，或者在重载操作符并为防止不必要的语义误解时，你不应该使用指针
 */